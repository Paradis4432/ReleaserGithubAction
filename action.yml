name: "Java Automatic Release"
author: "Fulminazzo - Paradis"

inputs:
  java-version:
    description: "The Java version to use when setting up Java."
    required: false
    default: 11
  discord_webhook:
    description: "discord webhook of the channel to send the update message"
    required: true
  git_token:
    description: "git token, use secrets.GITHUB_TOKEN"
    required: true

# Jobs that will execute
runs:
  using: "composite"
  steps:
    - name: setup env vars
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.git_token }}
        REPOSITORY_NAME: ${{ github.event.repository.name }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        echo "Repository: $REPOSITORY_NAME"
        echo "Commit Message: $COMMIT_MESSAGE"
    # Checkout repo to bring the script to the repository directory
    - name: Checkout repo
      uses: actions/checkout@v4
    # Setup Java to the specified version
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        add-job-summary: 'on-failure'
    # Build using Gradle
    - name: Build Gradle
      id: gradle
      run: |-
        ./gradlew build
        echo VARIABLES="build.gradle settings.gradle include build/libs/ (?<=version\s=\s(\"|'))([0-9.]+(-SNAPSHOT)?) (?<=include\s(\"|'))([^\"']+)" >> $GITHUB_OUTPUT
      shell: bash
    # Obtain the Project version and modules
    - name: Gather Project Info
      id: gatherinfo
      env:
        MAVEN_VARS: ${{ steps.maven.outputs.VARIABLES }}
        GRADLE_VARS: ${{ steps.gradle.outputs.VARIABLES }}
      run: |-
        VARS=$MAVEN_VARS
        test "$VARS" == "" && VARS=$GRADLE_VARS
        VARS=($VARS)
        export BUILD_FILE="${VARS[0]}"
        export MODULES_FILE="${VARS[1]}"
        export MODULES_ID="${VARS[2]}"
        export OUTPUT_DIR="${VARS[3]}"
        export VERSION_REGEX="${VARS[4]}"
        export MODULES_REGEX="${VARS[5]}"
        bash $GITHUB_ACTION_PATH/gather_buildtool_facts.sh
      shell: bash
    - name: Release Project
      env:
        VERSION: ${{ steps.gatherinfo.outputs.VERSION }}
        FILES: ${{ steps.gatherinfo.outputs.FILES }}
      run: |-
        export VERSION=$VERSION
        export FILES=$FILES
        export BUILD_TOOL="GRADLE"
        bash $GITHUB_ACTION_PATH/release.sh
      shell: bash
    - name: "send discord message"
      env:
        DISCORD_WEBHOOK: ${{ inputs.discord_webhook }}
      uses: Ilshidur/action-discord@master
      with:
        args: 'New release for: {{ EVENT_PAYLOAD.repository.full_name }}. ${{ github.server_url }}/${{ github.repository }}/releases/latest'